// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

namespace Microsoft.InnerEye.Azure.Segmentation.API.Common
{
    using System;
    using System.Collections.Generic;
    using Newtonsoft.Json;

    /// <summary>
    /// Encodes configuration information for a DICOM association
    /// </summary>
    public class ClientAETConfig : IEquatable<ClientAETConfig>
    {
        /// <summary>
        /// Constructs a new ClientAETConfig from the given config options and endpoint specified.
        /// </summary>
        /// <param name="config">Configuration elements for the AET</param>
        /// <param name="destination">Destination to route results to (may be null)</param>
        /// <param name="shouldReturnImage">
        /// If the channel data for the model needs to be returned with the segmentation result
        /// to the destination Dicom end point.
        /// </param>
        [JsonConstructor]
        public ClientAETConfig(AETConfig config, DicomEndPoint destination, bool shouldReturnImage)
        {
            Config = config ?? throw new ArgumentNullException(nameof(config));
            Destination = destination;
            ShouldReturnImage = shouldReturnImage;
        }

        /// <summary>
        /// Clone this into a new instance of the <see cref="ClientAETConfig"/> class, optionally replacing some properties.
        /// </summary>
        /// <param name="config">Optional new AETConfig.</param>
        /// <param name="destination">Optional new destination.</param>
        /// <param name="shouldReturnImage">Optional new shouldReturnImage.</param>
        /// <returns>New ClientAETConfig.</returns>
        public ClientAETConfig With(
            AETConfig config = null,
            DicomEndPoint destination = null,
            bool? shouldReturnImage = null) =>
                new ClientAETConfig(
                    config ?? Config,
                    destination ?? Destination,
                    shouldReturnImage ?? ShouldReturnImage);

        /// <summary>
        /// Encodes how an AET is configured
        /// </summary>
        public AETConfig Config { get; }

        /// <summary>
        /// The destination to route any results generated by models in the above config.
        /// May be null.
        /// </summary>
        public DicomEndPoint Destination { get; }

        /// <summary>
        /// If any image data needs to be returned in the result.
        /// </summary>
        public bool ShouldReturnImage { get; }

        /// <inheritdoc/>
        public override bool Equals(object obj)
        {
            return Equals(obj as ClientAETConfig);
        }

        /// <inheritdoc/>
        public bool Equals(ClientAETConfig other)
        {
            return other != null &&
                   EqualityComparer<AETConfig>.Default.Equals(Config, other.Config) &&
                   EqualityComparer<DicomEndPoint>.Default.Equals(Destination, other.Destination) &&
                   ShouldReturnImage == other.ShouldReturnImage;
        }

        /// <inheritdoc/>
        public override int GetHashCode()
        {
            var hashCode = 1850040063;
            hashCode = hashCode * -1521134295 + EqualityComparer<AETConfig>.Default.GetHashCode(Config);
            hashCode = hashCode * -1521134295 + EqualityComparer<DicomEndPoint>.Default.GetHashCode(Destination);
            hashCode = hashCode * -1521134295 + ShouldReturnImage.GetHashCode();
            return hashCode;
        }

        /// <inheritdoc/>
        public static bool operator ==(ClientAETConfig left, ClientAETConfig right)
        {
            return EqualityComparer<ClientAETConfig>.Default.Equals(left, right);
        }

        /// <inheritdoc/>
        public static bool operator !=(ClientAETConfig left, ClientAETConfig right)
        {
            return !(left == right);
        }
    }
}
