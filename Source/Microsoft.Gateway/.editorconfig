# You can learn more about editorconfig here: https://docs.microsoft.com/en-us/visualstudio/ide/editorconfig-code-style-settings-reference
[*.cs]


#Core editorconfig formatting - indentation

#use soft tabs (spaces) for indentation
indent_style = space

#Formatting - indentation options

#indent switch case contents.
csharp_indent_case_contents = true
#csharp_indent_case_contents_when_block
csharp_indent_case_contents_when_block = true
#indent switch labels
csharp_indent_switch_labels = true

#Formatting - new line options

#place catch statements on a new line
csharp_new_line_before_catch = true
#place else statements on a new line
csharp_new_line_before_else = true
#require finally statements to be on a new line after the closing brace
csharp_new_line_before_finally = true
#require members of object initializers to be on the same line
csharp_new_line_before_members_in_object_initializers = false
#require braces to be on a new line for methods, lambdas, object_collection_array_initializers, control_blocks, and types (also known as "Allman" style)
csharp_new_line_before_open_brace = methods, lambdas, object_collection_array_initializers, control_blocks, types

#Formatting - organize using options

#sort System.* using directives alphabetically, and place them before other usings
dotnet_sort_system_directives_first = true

#Formatting - spacing options

#require NO space between a cast and the value
csharp_space_after_cast = false
#require a space before the colon for bases or interfaces in a type declaration
csharp_space_after_colon_in_inheritance_clause = true
#require a space after a keyword in a control flow statement such as a for loop
csharp_space_after_keywords_in_control_flow_statements = true
#require a space before the colon for bases or interfaces in a type declaration
csharp_space_before_colon_in_inheritance_clause = true
#remove space within empty argument list parentheses
csharp_space_between_method_call_empty_parameter_list_parentheses = false
#remove space between method call name and opening parenthesis
csharp_space_between_method_call_name_and_opening_parenthesis = false
#do not place space characters after the opening parenthesis and before the closing parenthesis of a method call
csharp_space_between_method_call_parameter_list_parentheses = false
#remove space within empty parameter list parentheses for a method declaration
csharp_space_between_method_declaration_empty_parameter_list_parentheses = false
#place a space character after the opening parenthesis and before the closing parenthesis of a method declaration parameter list.
csharp_space_between_method_declaration_parameter_list_parentheses = false

#Formatting - wrapping options

#leave code block on single line
csharp_preserve_single_line_blocks = true
#leave statements and member declarations on the same line
csharp_preserve_single_line_statements = true

#Style - Code block preferences

#prefer curly braces even for one line of code
csharp_prefer_braces = true:error

#Style - expression bodied member options

#prefer block bodies for constructors
csharp_style_expression_bodied_constructors = false:suggestion
#prefer block bodies for methods
csharp_style_expression_bodied_methods = false:silent
#prefer expression-bodied members for properties
csharp_style_expression_bodied_properties = true:suggestion

#Style - expression level options

#prefer out variables to be declared inline in the argument list of a method call when possible
csharp_style_inlined_variable_declaration = true:error
#prefer tuple names to ItemX properties
dotnet_style_explicit_tuple_names = true:error
#prefer the language keyword for member access expressions, instead of the type name, for types that have a keyword to represent them
dotnet_style_predefined_type_for_member_access = true:suggestion

#Style - Expression-level  preferences

#prefer default(T) over default
csharp_prefer_simple_default_expression = false:error
#prefer objects to be initialized using object initializers when possible
dotnet_style_object_initializer = true:error
#prefer inferred tuple element names
dotnet_style_prefer_inferred_tuple_names = true:suggestion

#Style - implicit and explicit types

#prefer var over explicit type in all cases, unless overridden by another code style rule
csharp_style_var_elsewhere = true:error
#prefer var is used to declare variables with built-in system types such as int
csharp_style_var_for_built_in_types = true:error
#prefer var when the type is already mentioned on the right-hand side of a declaration expression
csharp_style_var_when_type_is_apparent = true:error

#Style - language keyword and framework type options

#prefer the language keyword for local variables, method parameters, and class members, instead of the type name, for types that have a keyword to represent them
dotnet_style_predefined_type_for_locals_parameters_members = true:suggestion

#Style - Miscellaneous preferences

#prefer anonymous functions over local functions
csharp_style_pattern_local_over_anonymous_function = false:suggestion

#Style - modifier options

#prefer accessibility modifiers to be declared except for public interface members. This will currently not differ from always and will act as future proofing for if C# adds default interface methods.
dotnet_style_require_accessibility_modifiers = for_non_interface_members:error

#Style - Modifier preferences

#when this rule is set to a list of modifiers, prefer the specified ordering.
csharp_preferred_modifier_order = public,private,protected,internal,static,readonly,async,override,sealed,virtual,abstract:silent

#Style - Pattern matching

#prefer pattern matching instead of is expression with type casts
csharp_style_pattern_matching_over_as_with_null_check = true:error

#Style - qualification options

#prefer fields not to be prefaced with this. or Me. in Visual Basic
dotnet_style_qualification_for_field = false:suggestion
#prefer methods not to be prefaced with this. or Me. in Visual Basic
dotnet_style_qualification_for_method = false:suggestion
#prefer properties not to be prefaced with this. or Me. in Visual Basic
dotnet_style_qualification_for_property = false:suggestion

# Default severity for all analyzer diagnostics
dotnet_analyzer_diagnostic.severity = error

# CA1014: Mark assemblies with CLSCompliant
dotnet_diagnostic.CA1014.severity = none

dotnet_code_quality.ca1711.allowed_suffixes = Queue

# CA5359: Do Not Disable Certificate Validation
dotnet_diagnostic.CA5359.severity = suggestion

# CA5394: Do not use insecure randomness
dotnet_diagnostic.CA5394.severity = suggestion

# IDE0002: Simplify Member Access
dotnet_diagnostic.IDE0002.severity = suggestion

# IDE0010: Add missing cases
dotnet_diagnostic.IDE0010.severity = suggestion

# IDE0022: Use block body for methods
dotnet_diagnostic.IDE0022.severity = silent

# IDE0032: Use auto property
dotnet_diagnostic.IDE0032.severity = suggestion

# IDE0036: Order modifiers
dotnet_diagnostic.IDE0036.severity = silent

# IDE0042: Deconstruct variable declaration
dotnet_diagnostic.IDE0042.severity = suggestion

# IDE0046: Convert to conditional expression
dotnet_diagnostic.IDE0046.severity = suggestion

# IDE0048: Add parentheses for clarity
dotnet_diagnostic.IDE0048.severity = silent

# IDE0058: Expression value is never used
dotnet_diagnostic.IDE0058.severity = suggestion

# IDE0065: Misplaced using directive
csharp_using_directive_placement = inside_namespace

# IDE0065: Misplaced using directive
dotnet_diagnostic.IDE0065.severity = silent

# IDE0130: Namespace does not match folder structure
dotnet_diagnostic.IDE0130.severity = suggestion

file_header_template = Copyright (c) Microsoft Corporation.\nLicensed under the MIT license.
